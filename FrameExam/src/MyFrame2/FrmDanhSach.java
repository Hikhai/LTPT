/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MyFrame2;
import java.awt.event.ItemEvent;
import java.awt.event.WindowEvent;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;

/**
 *
 * @author ky
 */
public class FrmDanhSach extends javax.swing.JFrame {

    private ArrayList<SinhVien> ds = new ArrayList<>(); // Danh sách sinh viên
    private int kt = 0; // Kiểm tra đã nạp dữ liệu vào list1 chưa
    /**
     * Creates new form FrmDanhSach
     */
    public FrmDanhSach() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        choice1 = new java.awt.Choice();
        txtmasv = new java.awt.TextField();
        txtdtb = new java.awt.TextField();
        txtht = new java.awt.TextField();
        button1 = new java.awt.Button();
        button2 = new java.awt.Button();
        button3 = new java.awt.Button();
        button4 = new java.awt.Button();
        list1 = new java.awt.List();
        label5 = new java.awt.Label();
        button5 = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        label1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label1.setText("Chọn một lớp");

        label2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label2.setText("Mã sinh viên");

        label3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label3.setText("Họ và tên");

        label4.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label4.setText("Điểm tb");

        choice1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice1ItemStateChanged(evt);
            }
        });

        button1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        button1.setLabel("Nhập");
        button1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                button1MousePressed(evt);
            }
        });

        button2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        button2.setLabel("Sửa");
        button2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                button2MousePressed(evt);
            }
        });

        button3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        button3.setLabel("Lưu file");
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });

        button4.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        button4.setLabel("Tìm kiếm");
        button4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                button4MousePressed(evt);
            }
        });
        button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button4ActionPerformed(evt);
            }
        });

        list1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                list1ItemStateChanged(evt);
            }
        });

        label5.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label5.setText("Danh sách các sinh viên");

        button5.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        button5.setLabel("Xóa");
        button5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                button5MousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(list1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtmasv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtht, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtdtb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(button4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(19, 19, 19)
                        .addComponent(button5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(button3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(choice1, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtmasv, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                                    .addComponent(label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(button1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(button2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(button4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(86, 86, 86)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtht, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(button5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(label4, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                            .addComponent(txtdtb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(22, 22, 22)
                .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(list1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        label1.getAccessibleContext().setAccessibleName("lable1");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_button4ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        try{// Mở file ds.txt để đọc
        FileInputStream f = new FileInputStream("DS.TXT");
        InputStreamReader in = new InputStreamReader(f);
        BufferedReader read = new BufferedReader(in);
        ds.clear();//Xóa dữ liệu trong ds
        do {
        String masv= read.readLine();// Đọc ra masv
        if (masv == null) //Nếu đã đọc hết thì thoát ra khỏi vòng lặp
        break;
        String ht= read.readLine();// Đọc ra họ tên
        String tenlop= read.readLine();//Đọc ra tên lớp
        float dtb= Float.parseFloat(read.readLine());//Đọc ra đtb
        SinhVien sv=new SinhVien(masv, ht,tenlop,dtb);//Tạo ra đối tượng sv
        ds.add(sv);//Lưu sv vào ds
        } while (true);
        read.close();//Đóng file ds.txt
       //Mở file Khoa để đọc
        FileInputStream f2=new FileInputStream("khoa.txt");
        InputStreamReader in2=new InputStreamReader(f2);
        BufferedReader read2=new BufferedReader(in2);
        do {
        String st = read2.readLine();//Đọc ra 1 tên khoa
        if (st == null)
        break;
        choice1.add(st);//Đưa tên khoa vào choice1
        } while (true);
        }catch(Exception yy){JOptionPane.showMessageDialog(this,"loi");
        }
        NapList(choice1.getSelectedItem());//Nạp dữ liệu vào list1 và các textfield
        kt=1;//kt =1 đã nạp dữ liệu vào list1
    }//GEN-LAST:event_formWindowOpened

    private void choice1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choice1ItemStateChanged
        // TODO add your handling code here:
        NapList(choice1.getSelectedItem());
    }//GEN-LAST:event_choice1ItemStateChanged

    private void list1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_list1ItemStateChanged
        // TODO add your handling code here:
        if (kt != 0) { 
        String st = list1.getSelectedItem(); // Lấy mã sinh viên được chọn
        
        // Duyệt danh sách sinh viên để tìm thông tin tương ứng
        for (SinhVien sv : ds) {
            if (sv.masv.equals(st)) {
                txtmasv.setText(sv.masv);
                txtht.setText(sv.ht);
                txtdtb.setText(String.valueOf(sv.dtb));
                break; // Thoát vòng lặp ngay khi tìm thấy sinh viên
            }
        }
    }   
    }//GEN-LAST:event_list1ItemStateChanged

    private void button1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button1MousePressed
        // TODO add your handling code here:
         // Kiểm tra xem mã sinh viên đã tồn tại trong danh sách hay chưa
        int ktma = 0; // Biến kiểm tra mã sinh viên trùng
        int n = ds.size();

        for (int i = 0; i < n; i++) {
            SinhVien sv = ds.get(i);
            if (sv.masv.equals(txtmasv.getText())) { // Nếu mã sinh viên đã tồn tại
                ktma = 1;
                break;
            }
        }

        if (ktma == 0) { // Nếu mã sinh viên chưa tồn tại, thêm mới vào danh sách
            try {
                SinhVien sv = new SinhVien(
                    txtmasv.getText(),          // Lấy mã sinh viên từ TextField
                    txtht.getText(),            // Lấy họ tên từ TextField
                    choice1.getSelectedItem(),  // Lấy lớp từ Choice
                    Float.parseFloat(txtdtb.getText()) // Lấy điểm trung bình từ TextField
                );

                ds.add(sv); // Thêm sinh viên vào ArrayList
                NapList(choice1.getSelectedItem()); // Cập nhật danh sách hiển thị

                JOptionPane.showMessageDialog(this, "Thêm sinh viên thành công!");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Điểm trung bình không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Mã sinh viên đã tồn tại!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_button1MousePressed

    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
        // TODO add your handling code here:
        try {
            // Mở file ds.txt để ghi
            FileOutputStream f = new FileOutputStream("ds.txt");
            OutputStreamWriter out = new OutputStreamWriter(f);
            PrintWriter ghi = new PrintWriter(out);

            // Ghi từng sinh viên trong danh sách vào file
            int n = ds.size();
            for (int i = 0; i < n; i++) {
                SinhVien sv = ds.get(i);
                ghi.println(sv.masv);   // Ghi mã sinh viên
                ghi.println(sv.ht);     // Ghi họ tên
                ghi.println(sv.tenlop); // Ghi tên lớp
                ghi.println(sv.dtb);    // Ghi điểm trung bình
            }

            // Đóng file sau khi ghi xong
            ghi.close();
            JOptionPane.showMessageDialog(this, "Đã lưu file thành công!"); // Thông báo thành công
        } catch (Exception tt) {
            JOptionPane.showMessageDialog(this, "Lỗi khi lưu file: " + tt.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_button3ActionPerformed

    private void button4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button4MousePressed
        // TODO add your handling code here:
        // Hiển thị hộp thoại nhập mã sinh viên cần tìm
        String st = JOptionPane.showInputDialog(this, "Nhập mã sinh viên cần tìm:");

        // Kiểm tra nếu người dùng không nhập gì hoặc nhấn hủy
        if (st == null || st.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bạn chưa nhập mã sinh viên!", "Lỗi", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Duyệt danh sách để tìm sinh viên
        int n = ds.size();
        boolean found = false;

        for (int i = 0; i < n; i++) {
            SinhVien sv = ds.get(i);
            if (sv.masv.equalsIgnoreCase(st)) { // So sánh không phân biệt chữ hoa/thường
                // Hiển thị thông tin sinh viên trong các textfield
                txtmasv.setText(sv.masv);
                txtht.setText(sv.ht);
                txtdtb.setText(String.valueOf(sv.dtb));

                found = true;
                break; // Thoát vòng lặp ngay khi tìm thấy sinh viên
            }
        }

        // Nếu không tìm thấy, hiển thị thông báo
        if (!found) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy sinh viên có mã: " + st, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_button4MousePressed

    private void button2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button2MousePressed
        // TODO add your handling code here:
        // Kiểm tra xem các trường dữ liệu có trống không
        if (txtmasv.getText().trim().isEmpty() || txtht.getText().trim().isEmpty() || txtdtb.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin!", "Lỗi", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            float newDtb = Float.parseFloat(txtdtb.getText()); // Kiểm tra xem điểm trung bình có hợp lệ không

            // Duyệt danh sách để tìm sinh viên có mã trùng
            int n = ds.size();
            boolean found = false;

            for (int i = 0; i < n; i++) {
                SinhVien sv = ds.get(i);
                if (sv.masv.equals(txtmasv.getText())) { // Nếu tìm thấy sinh viên có mã trùng
                    sv.DoiTen(txtht.getText());  // Cập nhật họ tên
                    sv.DoiLop(choice1.getSelectedItem()); // Cập nhật tên lớp
                    sv.DoiDtb(newDtb); // Cập nhật điểm trung bình

                    ds.set(i, sv); // Cập nhật lại danh sách
                    NapList(choice1.getSelectedItem()); // Cập nhật lại danh sách hiển thị
                    found = true;

                    JOptionPane.showMessageDialog(this, "Đã cập nhật thông tin sinh viên!");
                    break; // Thoát vòng lặp ngay khi sửa xong
                }
            }

            // Nếu không tìm thấy sinh viên có mã đó
            if (!found) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy sinh viên có mã: " + txtmasv.getText(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Điểm trung bình không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_button2MousePressed

    private void button5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button5MousePressed
        // TODO add your handling code here:
        // Kiểm tra xem người dùng đã nhập mã sinh viên chưa
        String masv = txtmasv.getText().trim();

        if (masv.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã sinh viên cần xóa!", "Lỗi", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Hiển thị hộp thoại xác nhận
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa sinh viên có mã: " + masv + "?", 
                                                    "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return; // Nếu chọn "No" thì không xóa
        }

        // Duyệt danh sách để tìm sinh viên cần xóa
        int n = ds.size();
        boolean found = false;

        for (int i = 0; i < n; i++) {
            SinhVien sv = ds.get(i);
            if (sv.masv.equals(masv)) { // Nếu tìm thấy sinh viên có mã trùng
                ds.remove(i); // Xóa khỏi danh sách
                NapList(choice1.getSelectedItem()); // Cập nhật lại danh sách hiển thị
                JOptionPane.showMessageDialog(this, "Đã xóa sinh viên thành công!");
                found = true;
                break; // Thoát vòng lặp ngay khi xóa xong
            }
        }

        // Nếu không tìm thấy sinh viên để xóa
        if (!found) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy sinh viên có mã: " + masv, "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_button5MousePressed

    public void NapList(String tenlop) {
        list1.removeAll(); // Xóa danh sách cũ
        for (SinhVien sv : ds) {
            if (sv.tenlop.equalsIgnoreCase(tenlop)) {
                // Hiển thị thông tin sinh viên cuối cùng trong danh sách
                txtmasv.setText(sv.masv);
                txtht.setText(sv.ht);
                txtdtb.setText(String.valueOf(sv.dtb));

                // Nạp vào list1
                list1.add(sv.masv);
                list1.add(sv.ht);
                list1.add(sv.tenlop);
                list1.add(String.valueOf(sv.dtb));
                list1.add("----------------------------------");
            }
        }
    }
    void this_windowOpened(WindowEvent e) {
        
   }
    void choice1_itemStateChanged(ItemEvent e) {
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmDanhSach.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmDanhSach.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmDanhSach.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmDanhSach.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmDanhSach().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Button button2;
    private java.awt.Button button3;
    private java.awt.Button button4;
    private java.awt.Button button5;
    private java.awt.Choice choice1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.List list1;
    private java.awt.TextField txtdtb;
    private java.awt.TextField txtht;
    private java.awt.TextField txtmasv;
    // End of variables declaration//GEN-END:variables
}
